package com.csumb.cst363;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;


@Controller    
public class ControllerPrescriptionCreate {
	
	@Autowired
	private JdbcTemplate jdbcTemplate;
	
	/*
	 * Doctor requests blank form for new prescription.
	 */
	@GetMapping("/prescription/new")
	public String newPrescription(Model model) {
		model.addAttribute("prescription", new Prescription());
		return "prescription_create";
	}

	@PostMapping("/prescription")
	public String newPrescription(Prescription prescription, Model model) {

		//Validates that Doctor SSN exists and matches Doctor Name.
		try (Connection con = getConnection()) {
			PreparedStatement ps = con.prepareStatement("SELECT lName from doctor where doctorSSN=?");
			ps.setString(1, prescription.getDoctorSSN());

			ResultSet rs = ps.executeQuery();

			if (rs.next()) {

				if (!rs.getString(1).equals(prescription.getDoctorLName())) {
					model.addAttribute("message", "No matching Doctor.");
					return "prescription_create";
				}
			} else {
				model.addAttribute("message", "Doctor not found.");
				return "prescription_create";
			}
		} catch (SQLException e) {
			System.out.println("SQL error in getPrescription "+e.getMessage());
			model.addAttribute("message", "SQL Error."+e.getMessage());
			model.addAttribute("Prescription", prescription);
			return "prescription_create";
		}

		//Validate that Patient SSN exists and matches Patient Name.
		try (Connection con = getConnection()) {
			PreparedStatement ps = con.prepareStatement("SELECT lName from patient where patientSSN=?");
			ps.setString(1, prescription.getPatientSSN());

			ResultSet rs = ps.executeQuery();

			if (rs.next()) {

				if (!rs.getString(1).equals(prescription.getPatientLName())) {
					model.addAttribute("message", "No matching Patient.");
					return "prescription_create";
				}
			} else {
				model.addAttribute("message", "Patient not found.");
				return "prescription_create";
			}
		} catch (SQLException e) {
			System.out.println("SQL error in getPrescription "+e.getMessage());
			model.addAttribute("message", "SQL Error."+e.getMessage());
			model.addAttribute("Prescription", prescription);
			return "prescription_create";
		}

		//Validate that Drug name exists.
		try (Connection con = getConnection()) {
			PreparedStatement ps = con.prepareStatement("SELECT drugID, genericName from drug where genericName=?");
			ps.setString(1, prescription.getDrugName());

			ResultSet rs = ps.executeQuery();

			if (rs.next()) {

				if (!rs.getString(2).equals(prescription.getDrugName())) {
					model.addAttribute("message", "No matching Drug.");
					return "prescription_create";
				}
				prescription.setDrugID(rs.getInt(1));
			} else {
				model.addAttribute("message", "Drug not found.");
				return "prescription_create";
			}
		} catch (SQLException e) {
			System.out.println("SQL error in getPrescription "+e.getMessage());
			model.addAttribute("message", "SQL Error."+e.getMessage());
			model.addAttribute("Prescription", prescription);
			return "prescription_create";
		}

		/* 	Insert new prescription.
		 *	If error, return error message and the prescription form
		 *	Otherwise, return the prescription with the RX number that was generated by the database.
		 */
		try (Connection con = getConnection()) {
			PreparedStatement ps = con.prepareStatement("INSERT INTO prescriptions(patientSSN, doctorSSN, drugID, datePrescribed, qty) values(?, ?, ?, ?, ?)",
				Statement.RETURN_GENERATED_KEYS);
			ps.setString(1, prescription.getPatientSSN());
			ps.setString(2, prescription.getDoctorSSN());
			ps.setInt(3, prescription.getDrugID());
			ps.setString(4, new SimpleDateFormat("yyyy-MM_dd").format(new Date()));
			ps.setInt(5, prescription.getQty());

			ps.executeUpdate();

			try (ResultSet keys = ps.getGeneratedKeys()) {
				if (keys.next()) {
					prescription.setRX(keys.getInt(1));
				}

			}

			// display message and prescription information
			model.addAttribute("message", "Prescription created.");
			model.addAttribute("prescription", prescription);
			return "prescription_show";

		} catch (SQLException e) {
			model.addAttribute("message", "SQL Error."+e.getMessage());
			model.addAttribute("prescription", prescription);
			return "prescription_create";
		}

	}

	/*
	 * return JDBC Connection using jdbcTemplate in Spring Server
	 */

	private Connection getConnection() throws SQLException {
		Connection conn = jdbcTemplate.getDataSource().getConnection();
		return conn;
	}

}
